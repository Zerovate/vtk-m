stages:
  - build
  - test

################################################################################
# Job templates
################################################################################

.base:
  variables:
    CCACHE_BASEDIR: /gpfs/wolf/
    CCACHE_DIR: /gpfs/wolf/proj-shared/csc331/vtk-m/ci/ccache/
    CCACHE_IGNOREOPTIONS: "-isystem=*"
    CCACHE_LOG_FILE: /gpfs/wolf/proj-shared/csc331/vtk-m/ci/ccache/.ccache.log
    CCACHE_NOHASHDIR: "true"

    CMAKE_BUILD_TYPE: RelWithDebInfo
    CMAKE_GENERATOR: Unix Makefiles
    EXTERNAL_WORKDIR: /gpfs/wolf/proj-shared/csc331/vtk-m/ci/${CI_PIPELINE_ID}_${BUILD_NAME}
    CUSTOM_CI_BUILDS_DIR: /gpfs/wolf/proj-shared/csc331/vtk-m/ci/runtime
    FF_ENABLE_JOB_CLEANUP: "true"
    GITLAB_SITE: OLCF GitLab

.build-steps:
  extends:
    - .base
  stage: build
  tags: [nobatch]
  before_script:
    # Prep the environment
    - module purge
    - echo ${JOB_MODULES}
    - module load git git-lfs cmake zstd ${JOB_MODULES}
    - export PATH="/ccsopen/home/vbolea/bin:$PATH"
    - ccache -p
    - ccache -z

    # Use a work directory on the shared filesystem accessible to compute nodes
    # instead of the work directory gitlab-ci sets up
    - git remote add lfs https://gitlab.kitware.com/vtk/vtk-m.git
    - git fetch lfs
    - git-lfs install
    - git-lfs pull lfs

    # Start running the builds scripts
    - cmake --version
    - "cmake -V -P .gitlab/ci/config/gitlab_ci_setup.cmake"
    - "test -e .gitlab/ci/CMakeCache.txt.${BUILD_NAME} && cp -v .gitlab/ci/CMakeCache.txt.${BUILD_NAME} build/CMakeCache.txt"
    - "ctest -VV -S .gitlab/ci/ctest_configure.cmake"

  script:
    - "ctest -VV -S .gitlab/ci/ctest_build.cmake"
    - ccache -s

  artifacts:
    expire_in: 24 hours
    when: always
    paths:
      # The artifacts of the build.
      - build/bin/
      - build/include/
      - build/vtkm/thirdparty/diy/vtkmdiy/
      - build/lib/
      - build/config/

      # CTest and CMake install files.
      # XXX(globbing): Can be simplified with support from
      # https://gitlab.com/gitlab-org/gitlab-runner/issues/4840
      #
      # Note: this also captures our CIState.cmake file
      - build/CMakeCache.txt
      - build/*.cmake
      - build/*/*.cmake
      - build/*/*/*.cmake
      - build/*/*/*/*.cmake
      - build/*/*/*/*/*.cmake
      - build/*/*/*/*/*/*.cmake
      - build/Testing/

      # CDash files.
      - build/DartConfiguration.tcl

.test-step:
  extends:
    - .base
  stage: test
  variables:
    GITLAB_CI_EMULATION: "true"
    CTEST_MAX_PARALLELISM: 1
  before_script:
    # Prep the environment
    - module purge
    - module load git cmake ${JOB_MODULES}

  script:
    - "ctest -VV -S .gitlab/ci/ctest_test.cmake || test_output=$?"
    - ctest -VV -S .gitlab/ci/ctest_test_submit.cmake
    - $(exit $test_output)

  artifacts:
    expire_in: 24 hours
    when: always
    paths:
      # The generated regression testing images
      - build/*.png
      - build/*.pnm
      - build/*.pmm
      - build/*/*.png
      - build/*/*.pnm
      - build/*/*.pmm
      - build/*/*/*.png
      - build/*/*/*.pnm
      - build/*/*/*.pmm
      - build/*/*/*/*.png
      - build/*/*/*/*.pnm
      - build/*/*/*/*.pmm
    reports:
      junit:
        - build/junit.xml

################################################################################
# Build jobs
################################################################################

########################################
# GCC + Spectrum MPI + Cuda
########################################

.ascent-gcc-smpi-cuda:
  variables:
    BUILD_NAME: ascent-gcc-smpi-cuda
    CC: gcc
    CXX: g++
    CUDAHOSTCXX: g++
    JOB_MODULES: gcc/8.1.1 spectrum-mpi lsf-tools cuda/11.2.0
    VTKM_SETTINGS: cuda+mpi
    CTEST_MAX_PARALLELISM: 4

build:ascent-gcc-cuda-smpi:
  extends:
    - .ascent-gcc-smpi-cuda
    - .build-steps

test:ascent-gcc-cuda-smpi:
  tags: [batch]
  variables:
    SCHEDULER_PARAMETERS: -P CSC331 -W 1:00 -nnodes 1
    CTEST_MAX_PARALLELISM: 1
  extends:
    - .ascent-gcc-smpi-cuda
    - .test-step
